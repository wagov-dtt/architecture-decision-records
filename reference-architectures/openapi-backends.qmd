---
title: "Reference Architecture: OpenAPI Backend"
date: 2025-07-28
status: Proposed
tags: [reference, api, openapi]
---

## When to Use This Pattern

Use when building REST APIs for organizational services, public APIs, or backend services requiring structured documentation and testing.

## Overview

Template for implementing OpenAPI-first backend services with standardized development and deployment practices.

## Core Components

```{mermaid}
graph TB
    Client[Clients] --> Gateway[API Gateway]
    Gateway --> Auth[Authentication]
    Gateway --> API[Business APIs]
    API --> DB[Database]
    API --> External[External Services]
    
    Monitor[Monitoring] --> Gateway
    Monitor --> API
    Monitor --> DB
```

## Project Kickoff Steps

1. **Setup API Standards** - Follow [ADR 003: API Documentation Standards](../development/003-apis.qmd) for OpenAPI documentation and testing
2. **Configure Authentication** - See [ADR 018: Zero Trust Remote Access](../security/018-zero-trust-access.qmd) for API-based access patterns
3. **Setup Secrets Management** - Follow [ADR 005: Secrets Management](../security/005-secrets-management.qmd) for credential handling
4. **Deploy on EKS** - See [ADR 002: AWS EKS for Cloud Workloads](../operations/002-workloads.qmd) for container deployment
5. **Configure CI/CD** - Follow [ADR 004: CI/CD Quality Assurance](../development/004-cicd.qmd) for automated testing and security scanning
6. **Setup Logging** - Follow [ADR 007: Centralized Security Logging](../operations/007-logging.qmd) for audit trails
7. **Database Integration** - Follow [ADR 019: Database Patterns](../operations/019-database-patterns.qmd) for Aurora Serverless v2 and backup strategies
8. **API Versioning** - *ADR needed for versioning and backward compatibility strategies*
